// post steps; terraform vars for platform; comments; puppet and chef; azure and do; serverspec and testinfra; packer and terraform should probably be cloned into branch dir
// utilize new sequential stages within parallel: https://jenkins.io/blog/2018/07/02/whats-new-declarative-piepline-13x-sequential-stages/
//@Library('jenkins-devops-libs@v1.0.0')_
library identifier: 'jenkins-devops-libs@master', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: 'https://github.com/mschuchard/jenkins-devops-libs.git'])

pipeline {
  agent any

  parameters {
    choice(name: 'PLATFORM', choices: 'All\nAWS\nAzure\nDO\nDocker\nVirtualbox', description: 'The platform to build for and deploy on.')
    string(name: 'SCM_URL', description: 'The URL (HTTPS or SSH URI) to the source repository containing the Packer template (should also contain provisioning and validation support code for the artifact).')
    string(name: 'TF_MOD_SCM_URL', description: 'The URL (HTTPS or SSH URI) to the source repository containing the Terraform module.')
  }

  stages {
    // passing creds to packer template from jenkins needs to be better so... vault time here too?; expand ansible to make it into webpage viewable demo and then expand goss
    stage('Build Artifact') {
      parallel {
        stage('Construct Amazon Linux AMI') {
          when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'AWS' } }
          steps {
            print 'Checkout Code'
            checkout([
              $class: 'GitSCM',
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              userRemoteConfigs: [[url: params.SCM_URL]]])
            print 'Validate Template and Provision Code'
            script {
              packer.validate {
                template = 'lamp-cloud/packer.json'
                only = 'amazon-ebs'
              }
            }
            ansiblePlaybook(disableHostKeyChecking: true, extras: '--syntax-check', playbook: 'lamp-cloud/ansible/lamp.yml')
            print 'Build and Validate AMI'
            script {
              packer.build {
                template = 'lamp-cloud/packer.json'
                only = 'amazon-ebs'
              }
            }
          }
        }
        stage('Construct CentOS Azure VHD') {
          when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'Azure' } }
          steps {
            print 'Checkout Code'
            checkout([
              $class: 'GitSCM',
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              userRemoteConfigs: [[url: params.SCM_URL]]])
            print 'Validate Template and Provision Code'
            script {
              packer.validate {
                template = 'lamp-cloud/packer.json'
                only = 'azure-arm'
              }
            }
            ansiblePlaybook(disableHostKeyChecking: true, extras: '--syntax-check', playbook: 'lamp-cloud/ansible/lamp.yml')
            print 'Build and Validate Azure VHD'
            // need to figure this out; azure is not great at this
            script {
              packer.build {
                template = 'lamp-cloud/packer.json'
                only = 'azure-arm'
              }
            }
          }
        }
        stage('Construct Ubuntu Droplet Image') {
          when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'DO' } }
          steps {
            print 'Checkout Code'
            checkout([
              $class: 'GitSCM',
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              userRemoteConfigs: [[url: params.SCM_URL]]])
            print 'Validate Template and Provision Code'
            script {
              packer.validate {
                template = 'lamp-cloud/packer.json'
                only = 'digitalocean'
              }
            }
            ansiblePlaybook(disableHostKeyChecking: true, extras: '--syntax-check', playbook: 'lamp-cloud/ansible/lamp.yml')
            print 'Build and Validate DI'
            script {
              packer.build {
                template = 'lamp-cloud/packer.json'
                only = 'digitalocean'
              }
            }
          }
        }
        // docker and vbox
      }
    }
    stage('Deploy Artifact') {
      // Terraform should leverage vault for creds
      parallel {
        stage('Deploy EC2 with AMI') {
          when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'AWS' } }
          steps {
            print 'Checkout Code'
            checkout([
              $class: 'GitSCM',
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              userRemoteConfigs: [[url: params.TF_MOD_SCM_URL]]])
            print 'Validate Config'
            script {
              terraform.init('terraform')
              terraform.plan('terraform')
            }
            // destroy first
            print 'Create EC2 with AMI'
            script {
              terraform.apply('terraform/plan.tfplan')
            }
          }
        }
        stage('Deploy VM with Azure VHD') {
          when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'Azure' } }
          steps {
            print 'Checkout Code'
            checkout([
              $class: 'GitSCM',
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              userRemoteConfigs: [[url: params.TF_MOD_SCM_URL]]])
            print 'Validate Config'
            script {
              terraform.init('terraform/azure')
              terraform.plan('terraform/azure')
            }
            // unsure what the minimum required resources are here
            print 'Create VM with VHD'
            script {
              terraform.apply('terraform/azure/plan.tfplan')
            }
          }
        }
        stage('Deploy Droplet with Image') {
          when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'DO' } }
          steps {
            print 'Checkout Code'
            checkout([
              $class: 'GitSCM',
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              userRemoteConfigs: [[url: params.TF_MOD_SCM_URL]]])
            print 'Validate Config'
            script {
              terraform.init('terraform/do')
              terraform.plan('terraform/do')
            }
            print 'Create Droplet with DI'
            script {
              terraform.apply('terraform/do/plan.tfplan')
            }
          }
        }
        // docker and virtualbox
      }
    }
  }
}
