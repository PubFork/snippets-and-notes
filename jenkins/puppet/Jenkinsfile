// pdk test unit definitely going slowly for some reason
@Library('jenkins-devops-libs@v1.2.1')_

pipeline {
  agent none

  parameters {
    string(name: 'SCM_URL', description: 'The URL (HTTPS or SSH URI) to the source repository containing the Puppet module.', defaultValue: 'https://github.com/puppetlabs/puppetlabs-motd.git')
    string(name: 'BRANCH', description: 'The branch of the Puppet module to be tesed.', defaultValue: 'master')
    string(name: 'MASTER', description: 'The reachable name of the Puppet Master hosting the Code Manager/Compiler service(s).', defaultValue: 'puppet')
    string(name: 'SERVER', description: 'The server to execute a Puppet Agent run on at pipeline completion (by default this does not occur).', defaultValue: null)
    string(name: 'PE_VERSION', description: 'The version of Puppet Enterprise being utilized.', defaultValue: '2018.1')
  }

  stages {
    stage('Initialize') {
      agent { label 'master' }

      steps {
        script {
          temp = params.SCM_URL =~ /\/\/.*\/|:.*\/(.*)\.git/
          module = temp[0][1]
          temp = null
        }

        print 'Retrieving Puppet module from remote Git repository.'

        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'RelativeTargetDirectory',
            relativeTargetDir: "${module}/${params.BRANCH}"]],
          submoduleCfg: [],
          userRemoteConfigs: [[url: params.SCM_URL]]])
      }
      post { success {
        print "Puppet module ${module} retrieved."
      } }
    }
    stage('Validate') {
      agent { docker {
        image 'puppet/puppet-dev-tools'
        args '-u root:root -v $HOME/workspace/.pdk:/root/.pdk'
        // args '-e HOME=$WORKSPACE -v $HOME/workspace/.pdk:$WORKSPACE/.pdk:rw,z' <-- problem here is bundler still cannot write to random subdirs in .pdk
      } }

      steps {
        print 'Executing PDK validation.'

        script {
          dir("${module}/${params.BRANCH}") {
            sh "pdk validate --parallel --pe-version ${params.PE_VERSION}"
          }
        }
      }
      post { success {
        print "${module} successfully validated with PDK."
      } }
    }
    stage('Unit Test') {
      agent { docker {
        image 'puppet/puppet-dev-tools'
        args '-u root:root -v $HOME/workspace/.pdk:/root/.pdk'
      } }

      steps {
        print 'Executing PDK unit testing.'

        script {
          dir("${module}/${params.BRANCH}") {
            sh "pdk test unit --pe-version ${params.PE_VERSION}"
          }
        }
      }
      post { success {
        print "${module} successfully unit tested with PDK."
      } }
    }
    stage('Code Manager Deploy') {
      agent { docker {
        image 'byrnedo/alpine-curl'
        args '-v $HOME/.puppetlabs:$HOME/.puppetlabs --entrypoint=\'\''
        // args '-e HOME=$WORKSPACE -v $HOME/workspace/.pdk:$WORKSPACE/.pdk:rw,z'
      } }

      steps {
        print 'Deploying code with Code Manager.'

        script {
          def localParams = params
          def localEnv = env

          puppet.code_deploy {
            environments = [localParams.BRANCH]
            servers      = [localParams.MASTER]
            token        = "${localEnv.HOME}/.puppetlabs/token"
            wait         = true
          }
        }
      }
      post { success {
        print "${module} successfully deployed to ${params.MASTER} inside ${params.BRANCH} environment."
      } }
    }
    stage('Puppet Agent Orchestration') {
      when { expression { return params.SERVER != null } }
      agent { docker {
        image 'byrnedo/alpine-curl'
        args '-v $HOME/.puppetlabs:$HOME/.puppetlabs --entrypoint=\'\''
      } }

      steps {
        print 'Executing Puppet Agent on server.'

        script {
          def localParams = params
          def localEnv = env

          puppet.task {
            description = "apply ${module} from ${params.BRANCH} on ${params.SERVER}"
            environment = [localParams.BRANCH]
            scope       = [localParams.SERVER]
            server      = localParams.MASTER
            task        = 'puppet'
            token       = "${localEnv.HOME}/.puppetlabs/token"
          }
        }
      }
      post { success {
        print "Puppet Agent successfully executed on ${params.SERVER}."
      } }
    }
  }
}
