# Utilizes features up to config version 3.1
# This is an alternative fully automated/orchestrated version of the docker-compose which attempts to sequence/parallelize every container's actions in a default structure. This is left unfinished, but can be completed using tools that wait for a container to finish executing.

#TODO: security options in config
version: '3'

services:
  # build docker images
  builder:
    build:
      context: .
      dockerfile: 'Dockerfile.builder'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-builder:1.0'
    container_name: reg-image-builder
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${app_path:?err}:/home/."
    command:
      - "${repo:?err}:${tag:?err}"
      - '-f'
      - "${dockerfile:?err}"
      - "${app_path:?err}"
    healthcheck:
      test:
        - CMD
        - docker
        - image
        - history
        - "${repo:?err}:${tag:?err}"
      interval: 10s
      timeout: 2s
      retries: 10
  # run docker container
  runner:
    build:
      context: .
      dockerfile: 'Dockerfile.runner'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-runner:1.0'
    container_name: reg-image-runner
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${app_container:?err}"
      # - additional flags and arguments as elements here
      - "${repo:?err}:${tag:?err}"
    depends_on:
      - builder
    healthcheck:
      test:
        - CMD
        - docker
        - container
        - inspect
        - "${app_container:?err}"
      interval: 10s
      timeout: 2s
      retries: 10
  # validates docker image
  validator:
    build:
      context: .
      dockerfile: 'Dockerfile.validator'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-validator:1.0'
    container_name: reg-image-validator
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${app_path:?err}:/home/."
    command:
      - "${app_container:?err}"
      - "${validate_cmd:?err}"
      - "${validate_arg:?err}"
    depends_on:
      - runner
  # qualys scan docker image
  qualys:
    build:
      context: .
      dockerfile: 'Dockerfile.qualys'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-qualys:1.0'
    container_name: reg-image-qualys
    depends_on:
      - validator
  # stop docker container
  stopper:
    build:
      context: .
      dockerfile: 'Dockerfile.stopper'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-stopper:1.0'
    container_name: reg-image-stopper
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${app_container:?err}"
    depends_on:
      - xray
      - qualys
  # tags docker image
  tagger:
    build:
      context: .
      dockerfile: 'Dockerfile.tagger'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-tagger:1.0'
    container_name: reg-image-tagger
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${repo:?err}:${tag:?err}"
      - "${registry:?err}/${repo:?err}:${tag:?err}"
    depends_on:
      - xray
      - qualys
  # publishes docker image in registry
  publisher:
    build:
      context: .
      dockerfile: 'Dockerfile.publisher'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-publisher:1.0'
    container_name: reg-image-publisher
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${registry:?err}/${repo:?err}:${tag:?err}"
    depends_on:
      - tagger
  # jfrog xray scan docker image
  xray:
    build:
      context: .
      dockerfile: 'Dockerfile.xray'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-xray:1.0'
    container_name: reg-image-xray
    volumes:
      - "${app_path:?err}:/home/."
    command:
      - "{ \"componentID\": \"docker://${repo:?err}:${tag:?err}\" }"
      - "https://xray.company.com/api/v1/scanArtifact?token=${xray_token:?err}"
    depends_on:
      - publisher
  # gathers docker image metadata
  metadata:
    build:
      context: .
      dockerfile: 'Dockerfile.metadata'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-metadata:1.0'
    container_name: reg-image-metadata
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${registry:?err}/${repo:?err}:${tag:?err}"
    depends_on:
      - publisher
  # prunes docker system (stopped containers and unused networks/images); this is dangerous on a dev workstation but very helpful for a CI server
  cleaner:
    build:
      context: .
      dockerfile: 'Dockerfile.cleaner'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-cleaner:1.0'
    container_name: reg-image-cleaner
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - stopper
      - metadata
