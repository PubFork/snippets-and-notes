# Utilizes features up to config version 3.1
version: '3'

services:
  # build docker images
  builder:
    build:
      context: .
      dockerfile: 'Dockerfile.builder'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-builder:1.0'
    container_name: reg-image-builder
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${app_path:?err}:/home/."
    command:
      - "${repo:?err}:${tag:?err}"
      - '-f'
      - "${dockerfile:?err}"
      - "${app_path:?err}"
    healthcheck:
      test:
        - CMD
        - docker
        - image
        - history
        - "${repo:?err}:${tag:?err}"
      interval: 10s
      timeout: 2s
      retries: 10
  # run docker container (normally requires builder)
  runner:
    build:
      context: .
      dockerfile: 'Dockerfile.runner'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-runner:1.0'
    container_name: reg-image-runner
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${app_container:?err}"
      # - additional flags and arguments as elements here
      - "${repo:?err}:${tag:?err}"
    healthcheck:
      test:
        - CMD
        - docker
        - container
        - inspect
        - "${app_container:?err}"
      interval: 10s
      timeout: 2s
      retries: 10
  # validates docker image (normally requires runner)
  validator:
    build:
      context: .
      dockerfile: 'Dockerfile.validator'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-validator:1.0'
    container_name: reg-image-validator
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${app_path:?err}:/home/."
    command:
      - "${app_container:?err}"
      - "${validate_cmd:?err}"
      - "${validate_arg?err}"
  # qualys scan docker image/container (customarily after validator)
  qualys:
    build:
      context: .
      dockerfile: 'Dockerfile.qualys'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-qualys:1.0'
    container_name: reg-image-qualys
    command:
      - "Authorization: Basic ${qualys_token:?err}"
      - "https://qualysapi.domain/api/2.0/fo/scan/?action=launch"
  # qualys scan results retrieval (normally requires qualys)
  qualys_ret:
    build:
      context: .
      dockerfile: 'Dockerfile.qualys_ret'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-qualys-ret:1.0'
    container_name: reg-image-qualys-ret
    command:
      - "Authorization: Basic ${qualys_token:?err}"
      - "https://qualysapi.domain/api/2.0/fo/scan/?action=list&scan_ref=scanid"
  # stop docker container (customarily after qualys)
  stopper:
    build:
      context: .
      dockerfile: 'Dockerfile.stopper'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-stopper:1.0'
    container_name: reg-image-stopper
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${app_container:?err}"
  # tags docker image (customarily after qualys)
  tagger:
    build:
      context: .
      dockerfile: 'Dockerfile.tagger'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-tagger:1.0'
    container_name: reg-image-tagger
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${repo:?err}:${tag:?err}"
      - "${registry:?err}/${repo:?err}:${tag:?err}"
  # publishes docker image in registry (normally requires tagger)
  publisher:
    build:
      context: .
      dockerfile: 'Dockerfile.publisher'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-publisher:1.0'
    container_name: reg-image-publisher
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${registry:?err}/${repo:?err}:${tag:?err}"
  # jfrog xray scan docker image (normally requires publisher)
  xray:
    build:
      context: .
      dockerfile: 'Dockerfile.xray'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-xray:1.0'
    container_name: reg-image-xray
    command:
      - "{ \"componentID\": \"docker://${repo:?err}:${tag:?err}\" }"
      - "https://xray.company.com/api/v1/scanArtifact?token=${xray_token:?err}"
  # jfrog xray scan security report generate (normally requires xray)
  xray_gen:
    build:
      context: .
      dockerfile: 'Dockerfile.xray_gen'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-xray-gen:1.0'
    container_name: reg-image-xray-gen
    command:
      - "https://xray.company.com/api/v1/securityReport/generate?token=${xray_token:?err}"
  # jfrog xray scan security report retrieve (normally requires xray_gen)
  xray_ret:
    build:
      context: .
      dockerfile: 'Dockerfile.xray_ret'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-xray-ret:1.0'
    container_name: reg-image-xray-ret
    command:
      - "https://xray.company.com/api/v1/securityReport?token=${xray_token:?err}"
  # gathers docker image metadata (normally requires publisher)
  metadata:
    build:
      context: .
      dockerfile: 'Dockerfile.metadata'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-metadata:1.0'
    container_name: reg-image-metadata
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "${registry:?err}/${repo:?err}:${tag:?err}"
  # prunes docker system (stopped containers and unused networks/images); this is dangerous on a dev workstation but very helpful for a CI server (customarily after metadata and xray_ret)
  cleaner:
    build:
      context: .
      dockerfile: 'Dockerfile.cleaner'
      args:
        registry: "${registry:?err}"
    image: 'reg/image-cleaner:1.0'
    container_name: reg-image-cleaner
    working_dir: /home
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "-${clean?err}f"
