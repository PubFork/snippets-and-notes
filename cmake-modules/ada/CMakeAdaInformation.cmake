# This file sets the basic flags for the Ada language in CMake.
# It also loads the available platform file for the system-compiler
# if it exists.

IF(UNIX)
  SET(CMAKE_Ada_OUTPUT_EXTENSION .o)
ELSE(UNIX)
  SET(CMAKE_Ada_OUTPUT_EXTENSION .obj)
ENDIF(UNIX)

SET(_INCLUDED_FILE 0)

# Load compiler-specific information.
IF(CMAKE_Ada_COMPILER_ID)
  INCLUDE(Compiler/${CMAKE_Ada_COMPILER_ID}-Ada OPTIONAL)
ENDIF(CMAKE_Ada_COMPILER_ID)

SET(CMAKE_BASE_NAME)
GET_FILENAME_COMPONENT(CMAKE_BASE_NAME ${CMAKE_Ada_COMPILER} NAME_WE)
# since the gnu compiler has several names force GNUAda
IF(CMAKE_COMPILER_IS_GNUAda)
  SET(CMAKE_BASE_NAME gnat)
ENDIF(CMAKE_COMPILER_IS_GNUAda)


# load a hardware specific file, mostly useful for embedded compilers
IF(CMAKE_Ada_COMPILER_ID)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_Ada_COMPILER_ID}-Ada OPTIONAL RESULT_VARIABLE _INCLUDED_FILE)
ENDIF(CMAKE_Ada_COMPILER_ID)
IF (NOT _INCLUDED_FILE)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_BASE_NAME} OPTIONAL)
ENDIF (NOT _INCLUDED_FILE)

# load the system- and compiler specific files
IF(CMAKE_Ada_COMPILER_ID)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_Ada_COMPILER_ID}-Ada OPTIONAL RESULT_VARIABLE _INCLUDED_FILE)
ENDIF(CMAKE_Ada_COMPILER_ID)
IF (NOT _INCLUDED_FILE)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME}-${CMAKE_BASE_NAME} OPTIONAL
          RESULT_VARIABLE _INCLUDED_FILE)
ENDIF (NOT _INCLUDED_FILE)
# We specify the compiler information in the system file for some
# platforms, but this language may not have been enabled when the file
# was first included.  Include it again to get the language info.
# Remove this when all compiler info is removed from system files.
IF (NOT _INCLUDED_FILE)
  INCLUDE(Platform/${CMAKE_SYSTEM_NAME} OPTIONAL)
ENDIF (NOT _INCLUDED_FILE)


# This should be included before the _INIT variables are
# used to initialize the cache.  Since the rule variables 
# have if blocks on them, users can still define them here.
# But, it should still be after the platform file so changes can
# be made to those values.

IF(CMAKE_USER_MAKE_RULES_OVERRIDE)
  # Save the full path of the file so try_compile can use it.
  INCLUDE(${CMAKE_USER_MAKE_RULES_OVERRIDE} RESULT_VARIABLE _override)
  SET(CMAKE_USER_MAKE_RULES_OVERRIDE "${_override}")
ENDIF()

IF(CMAKE_USER_MAKE_RULES_OVERRIDE_Ada)
  # Save the full path of the file so try_compile can use it.
  INCLUDE(${CMAKE_USER_MAKE_RULES_OVERRIDE_Ada} RESULT_VARIABLE _override)
  SET(CMAKE_USER_MAKE_RULES_OVERRIDE_Ada "${_override}")
ENDIF()

# Create a set of shared library variable specific to Ada
# For 90% of the systems, these are the same flags as the Ada versions
# so if these are not set just copy the flags from the Ada version
IF(NOT CMAKE_SHARED_LIBRARY_CREATE_Ada_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_CREATE_Ada_FLAGS ${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_LIBRARY_CREATE_Ada_FLAGS)

IF(NOT CMAKE_SHARED_LIBRARY_Ada_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_Ada_FLAGS ${CMAKE_SHARED_LIBRARY_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_LIBRARY_Ada_FLAGS)

IF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_Ada_FLAGS)
  SET(CMAKE_SHARED_LIBRARY_LINK_Ada_FLAGS ${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS})
ENDIF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_Ada_FLAGS)

IF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG)
  SET(CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG ${CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG}) 
ENDIF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG)

IF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG_SEP)
  SET(CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP})
ENDIF(NOT CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG_SEP)

IF(NOT CMAKE_SHARED_LIBRARY_RPATH_LINK_Ada_FLAG)
  SET(CMAKE_SHARED_LIBRARY_RPATH_LINK_Ada_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG})
ENDIF(NOT CMAKE_SHARED_LIBRARY_RPATH_LINK_Ada_FLAG)

IF(NOT DEFINED CMAKE_EXE_EXPORTS_Ada_FLAG)
  SET(CMAKE_EXE_EXPORTS_Ada_FLAG ${CMAKE_EXE_EXPORTS_C_FLAG})
ENDIF()

IF(NOT DEFINED CMAKE_SHARED_LIBRARY_SONAME_Ada_FLAG)
  SET(CMAKE_SHARED_LIBRARY_SONAME_Ada_FLAG ${CMAKE_SHARED_LIBRARY_SONAME_C_FLAG})
ENDIF()

IF(NOT DEFINED CMAKE_SHARED_MODULE_CREATE_Ada_FLAGS)
  SET(CMAKE_SHARED_MODULE_CREATE_Ada_FLAGS ${CMAKE_SHARED_MODULE_CREATE_C_FLAGS})
ENDIF()

IF(NOT DEFINED CMAKE_SHARED_MODULE_Ada_FLAGS)
  SET(CMAKE_SHARED_MODULE_Ada_FLAGS ${CMAKE_SHARED_MODULE_C_FLAGS})
ENDIF()

IF(NOT CMAKE_EXECUTABLE_RUNTIME_Ada_FLAG)
  SET(CMAKE_EXECUTABLE_RUNTIME_Ada_FLAG ${CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG})
ENDIF(NOT CMAKE_EXECUTABLE_RUNTIME_Ada_FLAG)

IF(NOT CMAKE_EXECUTABLE_RUNTIME_Ada_FLAG_SEP)
  SET(CMAKE_EXECUTABLE_RUNTIME_Ada_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_Ada_FLAG_SEP})
ENDIF(NOT CMAKE_EXECUTABLE_RUNTIME_Ada_FLAG_SEP)

IF(NOT CMAKE_EXECUTABLE_RPATH_LINK_Ada_FLAG)
  SET(CMAKE_EXECUTABLE_RPATH_LINK_Ada_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_Ada_FLAG})
ENDIF(NOT CMAKE_EXECUTABLE_RPATH_LINK_Ada_FLAG)

IF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_Ada_WITH_RUNTIME_PATH)
  SET(CMAKE_SHARED_LIBRARY_LINK_Ada_WITH_RUNTIME_PATH ${CMAKE_SHARED_LIBRARY_LINK_C_WITH_RUNTIME_PATH})
ENDIF(NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_Ada_WITH_RUNTIME_PATH)

IF(NOT CMAKE_INCLUDE_FLAG_Ada)
  SET(CMAKE_INCLUDE_FLAG_Ada ${CMAKE_INCLUDE_FLAG_C})
ENDIF(NOT CMAKE_INCLUDE_FLAG_Ada)

IF(NOT CMAKE_INCLUDE_FLAG_SEP_Ada)
  SET(CMAKE_INCLUDE_FLAG_SEP_Ada ${CMAKE_INCLUDE_FLAG_SEP_C})
ENDIF(NOT CMAKE_INCLUDE_FLAG_SEP_Ada)

# repeat for modules
IF(NOT CMAKE_SHARED_MODULE_CREATE_Ada_FLAGS)
  SET(CMAKE_SHARED_MODULE_CREATE_Ada_FLAGS ${CMAKE_SHARED_MODULE_CREATE_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_MODULE_CREATE_Ada_FLAGS)

IF(NOT CMAKE_SHARED_MODULE_Ada_FLAGS)
  SET(CMAKE_SHARED_MODULE_Ada_FLAGS ${CMAKE_SHARED_MODULE_C_FLAGS})
ENDIF(NOT CMAKE_SHARED_MODULE_Ada_FLAGS)

SET(CMAKE_VERBOSE_MAKEFILE FALSE CACHE BOOL "If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.")

# add the flags to the cache based
# on the initial values computed in the platform/*.cmake files
# use _INIT variables so that this only happens the first time
# and you can set these flags in the cmake cache
SET(CMAKE_Ada_FLAGS_INIT "$ENV{AFLAGS} ${CMAKE_Ada_FLAGS_INIT}")
# avoid just having a space as the initial value for the cache 
IF(CMAKE_Ada_FLAGS_INIT STREQUAL " ")
  SET(CMAKE_Ada_FLAGS_INIT)
ENDIF(CMAKE_Ada_FLAGS_INIT STREQUAL " ")
SET (CMAKE_Ada_FLAGS "${CMAKE_Ada_FLAGS_INIT}" CACHE STRING
     "Flags used by the compiler during all build types.")

INCLUDE(CMakeCommonLanguageInclude)

# now define the following rules:
# CMAKE_Ada_CREATE_SHARED_LIBRARY
# CMAKE_Ada_CREATE_SHARED_MODULE
# CMAKE_Ada_COMPILE_OBJECT
# CMAKE_Ada_LINK_EXECUTABLE

# create a shared Ada library
IF(NOT CMAKE_Ada_CREATE_SHARED_LIBRARY)
  SET(CMAKE_Ada_CREATE_SHARED_LIBRARY "<CMAKE_Ada_COMPILER> <CMAKE_SHARED_LIBRARY_Ada_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_Ada_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_Ada_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
ENDIF(NOT CMAKE_Ada_CREATE_SHARED_LIBRARY)

# create a Ada shared module copy the shared library rule by default
IF(NOT CMAKE_Ada_CREATE_SHARED_MODULE)
  SET(CMAKE_Ada_CREATE_SHARED_MODULE ${CMAKE_Ada_CREATE_SHARED_LIBRARY})
ENDIF(NOT CMAKE_Ada_CREATE_SHARED_MODULE)


# Create a static archive incrementally for large object file counts.
# If CMAKE_Ada_CREATE_STATIC_LIBRARY is set it will override these.
IF(NOT DEFINED CMAKE_Ada_ARCHIVE_CREATE)
  SET(CMAKE_Ada_ARCHIVE_CREATE "<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS>")
ENDIF()
IF(NOT DEFINED CMAKE_Ada_ARCHIVE_APPEND)
  SET(CMAKE_Ada_ARCHIVE_APPEND "<CMAKE_AR> r  <TARGET> <LINK_FLAGS> <OBJECTS>")
ENDIF()
IF(NOT DEFINED CMAKE_Ada_ARCHIVE_FINISH)
  SET(CMAKE_Ada_ARCHIVE_FINISH "<CMAKE_RANLIB> <TARGET>")
ENDIF()

# compile a Ada file into an object file
IF(NOT CMAKE_Ada_COMPILE_OBJECT)
  SET(CMAKE_Ada_COMPILE_OBJECT
    "<CMAKE_Ada_COMPILER> <FLAGS> -c <SOURCE> -o <OBJECT>")
ENDIF(NOT CMAKE_Ada_COMPILE_OBJECT)

IF(NOT CMAKE_Ada_LINK_EXECUTABLE)
  SET(CMAKE_Ada_LINK_EXECUTABLE 
    "${CMAKE_Ada_BUILDER} -aO<OBJECT_DIR> -aL<OBJECT_DIR> <LINK_FLAGS> <TARGET_BASE>.adb -cargs <FLAGS> -bargs ${CMAKE_Ada_BIND_FLAGS} -largs <CMAKE_Ada_LINK_FLAGS> <LINK_LIBRARIES>")
ENDIF(NOT CMAKE_Ada_LINK_EXECUTABLE)

IF(CMAKE_Ada_STANDARD_LIBRARIES_INIT)
  SET(CMAKE_Ada_STANDARD_LIBRARIES "${CMAKE_Ada_STANDARD_LIBRARIES_INIT}"
    CACHE STRING "Libraries linked by defalut with all Ada applications.")
  MARK_AS_ADVANCED(CMAKE_Ada_STANDARD_LIBRARIES)
ENDIF(CMAKE_Ada_STANDARD_LIBRARIES_INIT)

IF(NOT CMAKE_NOT_USING_CONFIG_FLAGS)
  SET (CMAKE_Ada_FLAGS_DEBUG "${CMAKE_Ada_FLAGS_DEBUG_INIT}" CACHE STRING
     "Flags used by the compiler during debug builds.")
  SET (CMAKE_Ada_FLAGS_MINSIZEREL "${CMAKE_Ada_FLAGS_MINSIZEREL_INIT}" CACHE STRING
      "Flags used by the compiler during release minsize builds.")
  SET (CMAKE_Ada_FLAGS_RELEASE "${CMAKE_Ada_FLAGS_RELEASE_INIT}" CACHE STRING
     "Flags used by the compiler during release builds (/MD /Ob1 /Oi /Ot /Oy /Gs will produce slightly less optimized but smaller files).")
  SET (CMAKE_Ada_FLAGS_RELWITHDEBINFO "${CMAKE_Ada_FLAGS_RELWITHDEBINFO_INIT}" CACHE STRING
     "Flags used by the compiler during Release with Debug Info builds.")
ENDIF(NOT CMAKE_NOT_USING_CONFIG_FLAGS)

MARK_AS_ADVANCED(
CMAKE_Ada_FLAGS
CMAKE_Ada_FLAGS_RELEASE
CMAKE_Ada_FLAGS_RELWITHDEBINFO
CMAKE_Ada_FLAGS_MINSIZEREL
CMAKE_Ada_FLAGS_DEBUG)

SET(CMAKE_Ada_INFORMATION_LOADED 1)
