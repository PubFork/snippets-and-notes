#  VL_FOUND        - system has VL
#  VL_INCLUDE_DIRS - the VL include directories
#  VL_LIBRARIES    - Link these to use VL

IF(VL_INCLUDE_DIR)
  #already in cache
  SET(VL_FIND_QUIETLY TRUE)
ENDIF(VL_INCLUDE_DIR)

find_path(VL_INCLUDE_DIR
  NAMES VLConfig.h
  PATHS /usr/include/vl)

find_path(CL_INCLUDE_DIR
  NAMES CLConfig.h
  PATHS /usr/include/cl)

set(VL_INCLUDE_DIRS ${VL_INCLUDE_DIR} ${CL_INCLUDE_DIR})

IF(EXISTS "${VL_INCLUDE_DIR}/VL.h")
    FILE(STRINGS "${VL_INCLUDE_DIR}/VL.h" VL_H REGEX "^#define VL_VERSION \"[^\"]*\"$")
    STRING(REGEX REPLACE "^.*VL_VERSION \"([0-9]+).*$" "\\1" VL_VERSION_MAJOR "${VL_H}")
    STRING(REGEX REPLACE "^.*VL_VERSION \"[0-9]+\\.([0-9]+).*$" "\\1" VL_VERSION_MINOR  "${VL_H}")
    STRING(REGEX REPLACE "^.*VL_VERSION \"[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" VL_VERSION_PATCH "${VL_H}")
    SET(VL_VERSION_STRING "${VL_VERSION_MAJOR}.${VL_VERSION_MINOR}.${VL_VERSION_PATCH}")
ENDIF()

find_library(VL_LIBRARY
  NAMES vl
  PATHS /usr/lib64 /usr/lib)

IF(VL_INCLUDE_DIRS AND VL_LIBRARY)
  SET(VL_FOUND TRUE)
  SET(VL_LIBRARY_DIR ${VL_LIBRARY})
ELSE(VL_INCLUDE_DIRS AND VL_LIBRARY)
  SET(VL_FOUND FALSE)
  SET(VL_LIBRARY_DIR)
ENDIF(VL_INCLUDE_DIRS AND VL_LIBRARY)

#handle the QUIETLY and REQUIRED arguments
include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(VL DEFAULT_MSG VL_LIBRARY VL_VERSION_STRING)

mark_as_advanced(
  VL_LIBRARY
  VL_INCLUDE_DIR
  CL_INCLUDE_DIR
  VL_VERSION_STRING)
