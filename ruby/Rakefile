require 'rake'

# would create 'rake tasks' that executes tasks without fatally erroring
def continue_after_errors(tasks = [:spec, 'foo:bar'])
  desc "Rake #{tasks.join(',')} and ignore errors."
  task 'ignore_errors' do
    tasks.each do |the_task|
      system("#{ENV['_']} #{the_task}") {}
    end
  end
end

# would create 'rake bar' that executes foo:bar
def top_level_alias(tasks = [:spec, 'foo:bar'])
  tasks.each do |the_task|
    if the_task =~ /:/
      desc "Top level alias for #{the_task}."
      task the_task.split(':')[0].to_sym => the_task
    end
  end
end

# would create 'rake' that executes spec and foo:bar
def auto_default(tasks = [:spec, 'foo:bar'])
  desc 'Default task'
  task default: tasks
end

# generates template using argument as variable inside template
task :generate, %i[variable] do |task, args|
  require 'erb'
  @variable = args[:variable]
  File.write("#{@variable}.rb", ERB.new(File.read('foo.erb')).result(binding))
end

# check erb
task :erb do
  Dir.glob('templates/*.erb').each do |file|
    begin
      ERB.new(File.read(file), nil, '-').result
    rescue NameError, TypeError
    rescue ScriptError => err
      print file
      warn err
    end
  end
end
