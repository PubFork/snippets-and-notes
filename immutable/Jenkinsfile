// post steps; add testinfra; terraform vars for platform; comments
@Library('jenkins-devops-libs')

pipeline {
  agent any

  parameters {
    choice(name: 'PLATFORM', choices: 'All\nAWS\nAzure\nDO\nDocker\nVirtualbox', description: 'The platform to build for and deploy on.')
  }

  stages {
    parallel {
      stage('Construct Amazon Linux AMI with Packer/Puppet') {
        when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'AWS' } }
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate Code') {
          steps {
            script {
              packer.validate {
                template = 'packer/packer.json'
                only = 'amazon-ebs'
              }
            }
            sh "puppet-check -s puppet/manifest.pp"
          }
        }
        stage('Build AMI') {
          steps {
            script {
              packer.build {
                template = 'packer/packer.json'
                only = 'amazon-ebs'
              }
            }
          }
        }
      }
      stage('Construct CentOS Azure VHD with Packer/Ansible') {
        when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'Azure' } }
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate Code') {
          steps {
            script {
              packer.validate {
                template = 'packer/packer.json'
                only = 'azure-arm'
              }
            }
            sh "ansible-playbook --syntax ansible/vhd.yml"
          }
        }
        stage('Build VHD') {
          steps {
            // need to figure this out; azure is not great at this
            script {
              packer.build {
                template = 'packer/packer.json'
                only = 'azure-arm'
              }
            }
          }
        }
      }
      stage('Construct Ubuntu Droplet Image with Packer/Chef') {
        when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'DO' } }
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate Code') {
          steps {
            script {
              packer.validate {
                template = 'packer/packer.json'
                only = 'digitalocean'
              }
            }
            sh "puppet-check -s chef/di.rb"
          }
        }
        stage('Build DI') {
          steps {
            // need to figure this out; chef is not great at local provisioning
            script {
              packer.build {
                template = 'packer/packer.json'
                only = 'digitalocean'
              }
            }
          }
        }
      }
      // docker and vbox
    }
    parallel {
      stage('Serverspec Validate') {
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate') {
          steps {
            // how to feed it the servers
            dir('serverspec') {
              sh "rake check[aws]"
              sh "rake check[azure]"
              sh "rake check[do]"
            }
          }
        }
      }
      stage('GOSS Validate') {
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate') {
          steps {
            script {
              goss.server {
                gossfile = 'goss/goss.yaml'
                port = '9001'
              }
            }
            // needs to pull from endpoint now
          }
        }
      }
      // testinfra
    }
    // Terraform plugin does not support Pipeline super well
    parallel {
      stage('Deploy EC2 with AMI') {
        when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'AWS' } }
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate Code') {
          steps {
            script {
              terraform.init('terraform/aws')
              terraform.plan('terraform/aws')
            }
          }
        }
        stage('Create EC2 with AMI') {
          steps {
            script {
              terraform.apply('terraform/aws/plan.tfplan')
            }
          }
        }
      }
      stage('Deploy VM with Azure VHD') {
        when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'Azure' } }
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate Code') {
          steps {
            script {
              terraform.init('terraform/azure')
              terraform.plan('terraform/azure')
            }
          }
        }
        // unsure what the minimum required resources are here
        stage('Create VM with VHD') {
          steps {
            script {
              terraform.apply('terraform/azure/plan.tfplan')
            }
          }
        }
      }
      stage('Deploy Droplet with Image') {
        when { expression { return params.PLATFORM == 'All' || params.PLATFORM == 'DO' } }
        stage('Checkout Code') {
          steps {
            print 'git clone'
          }
        }
        stage('Validate Code') {
          steps {
            script {
              terraform.init('terraform/do')
              terraform.plan('terraform/do')
            }
          }
        }
        stage('Create Droplet with DI') {
          steps {
            script {
              terraform.apply('terraform/do/plan.tfplan')
            }
          }
        }
      }
      // docker and virtualbox
    }
  }
}
